"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Components", {
  enumerable: true,
  get: function get() {
    return _Components.default;
  }
});
Object.defineProperty(exports, "Templates", {
  enumerable: true,
  get: function get() {
    return _Templates.default;
  }
});
Object.defineProperty(exports, "Formio", {
  enumerable: true,
  get: function get() {
    return _Formio.default;
  }
});
Object.defineProperty(exports, "Form", {
  enumerable: true,
  get: function get() {
    return _Form2.default;
  }
});
Object.defineProperty(exports, "Utils", {
  enumerable: true,
  get: function get() {
    return _utils.default;
  }
});

var _components = _interopRequireDefault(require("./components"));

var _Components = _interopRequireDefault(require("./components/Components"));

var _Templates = _interopRequireDefault(require("./templates/Templates"));

var _Formio = _interopRequireDefault(require("./Formio"));

var _Form2 = _interopRequireDefault(require("./Form"));

var _utils = _interopRequireDefault(require("./utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

_Components.default.setComponents(_components.default);

_Formio.default.Components = _Components.default;
_Formio.default.Templates = _Templates.default;

var registerPlugin = function registerPlugin(plugin) {
  // Sanity check.
  if (_typeof(plugin) !== 'object') {
    return;
  } // We need to set the base first as templates are overrides.


  if (plugin.hasOwnProperty('framework')) {
    _Templates.default.framework = plugin.framework;
  }

  for (var key in Object.keys(plugin)) {
    switch (key) {
      case 'templates':
        if (!plugin.templates[_Templates.default.framework]) {
          console.error('Unknown template in plugin for framework', _Templates.default.framework);
        } else {
          _Templates.default.current = plugin.templates[_Templates.default.framework];
        }

        break;

      case 'components':
        _Components.default.setComponents(plugin.components);

        break;

      case 'framework':
        // Already handled so ignore.
        break;

      case 'fetch':
        for (var name in Object.keys(plugin.fetch)) {
          _Formio.default.registerPlugin(plugin.fetch[name], name);
        }

        break;

      case 'providers':
        // TODO: Implement custom providers
        break;

      default:
        console.log('Unknown plugin option', key);
    }
  }
};
/**
 * Allows passing in plugins as multiple arguments or an array of plugins.
 *
 * Formio.plugins(plugin1, plugin2, etc);
 * Formio.plugins([plugin1, plugin2, etc]);
 */


_Formio.default.use = function () {
  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins[_key] = arguments[_key];
  }

  plugins.forEach(function (plugin) {
    if (Array.isArray(plugin)) {
      plugin.forEach(function (p) {
        return registerPlugin(p);
      });
    } else {
      registerPlugin(plugin);
    }
  });
};